{"ast":null,"code":"export function getInitialBoard(rows, cols) {\n  return Array.from({\n    length: rows\n  }, () => Array(cols).fill(0));\n}\nconst TETROMINOS = [\n// I\n{\n  shape: [[1, 1, 1, 1]],\n  color: 1\n},\n// O\n{\n  shape: [[2, 2], [2, 2]],\n  color: 2\n},\n// T\n{\n  shape: [[0, 3, 0], [3, 3, 3]],\n  color: 3\n},\n// S\n{\n  shape: [[0, 4, 4], [4, 4, 0]],\n  color: 4\n},\n// Z\n{\n  shape: [[5, 5, 0], [0, 5, 5]],\n  color: 5\n},\n// J\n{\n  shape: [[6, 0, 0], [6, 6, 6]],\n  color: 6\n},\n// L\n{\n  shape: [[0, 0, 7], [7, 7, 7]],\n  color: 7\n}];\nexport function getRandomTetromino(cols) {\n  const idx = Math.floor(Math.random() * TETROMINOS.length);\n  const {\n    shape,\n    color\n  } = TETROMINOS[idx];\n  return {\n    tetromino: shape,\n    color,\n    pos: {\n      x: Math.floor((cols - shape[0].length) / 2),\n      y: 0\n    }\n  };\n}\nexport function checkCollision(board, tetromino, pos) {\n  for (let y = 0; y < tetromino.length; y++) {\n    for (let x = 0; x < tetromino[0].length; x++) {\n      if (tetromino[y][x]) {\n        const newY = pos.y + y;\n        const newX = pos.x + x;\n        if (newY < 0 || newY >= board.length || newX < 0 || newX >= board[0].length || board[newY][newX]) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\nexport function mergeTetromino(board, tetromino, pos, preview = false) {\n  const newBoard = board.map(row => [...row]);\n  for (let y = 0; y < tetromino.length; y++) {\n    for (let x = 0; x < tetromino[0].length; x++) {\n      if (tetromino[y][x]) {\n        const newY = pos.y + y;\n        const newX = pos.x + x;\n        if (newY >= 0 && newY < board.length && newX >= 0 && newX < board[0].length) {\n          newBoard[newY][newX] = preview ? -tetromino[y][x] : tetromino[y][x];\n        }\n      }\n    }\n  }\n  return newBoard;\n}\nexport function clearLines(board) {\n  let cleared = 0;\n  const newBoard = board.filter(row => {\n    if (row.every(cell => cell > 0)) {\n      cleared++;\n      return false;\n    }\n    return true;\n  });\n  while (newBoard.length < board.length) {\n    newBoard.unshift(Array(board[0].length).fill(0));\n  }\n  return {\n    newBoard,\n    cleared\n  };\n}\nexport function nextPosition(pos, dir) {\n  if (dir === \"left\") return {\n    ...pos,\n    x: pos.x - 1\n  };\n  if (dir === \"right\") return {\n    ...pos,\n    x: pos.x + 1\n  };\n  if (dir === \"down\") return {\n    ...pos,\n    y: pos.y + 1\n  };\n  return pos;\n}","map":{"version":3,"names":["getInitialBoard","rows","cols","Array","from","length","fill","TETROMINOS","shape","color","getRandomTetromino","idx","Math","floor","random","tetromino","pos","x","y","checkCollision","board","newY","newX","mergeTetromino","preview","newBoard","map","row","clearLines","cleared","filter","every","cell","unshift","nextPosition","dir"],"sources":["C:/Users/jade9/OneDrive/바탕 화면/dd/src/utils/tetris.js"],"sourcesContent":["export function getInitialBoard(rows, cols) {\r\n  return Array.from({ length: rows }, () => Array(cols).fill(0));\r\n}\r\n\r\nconst TETROMINOS = [\r\n  // I\r\n  {\r\n    shape: [\r\n      [1, 1, 1, 1]\r\n    ],\r\n    color: 1\r\n  },\r\n  // O\r\n  {\r\n    shape: [\r\n      [2, 2],\r\n      [2, 2]\r\n    ],\r\n    color: 2\r\n  },\r\n  // T\r\n  {\r\n    shape: [\r\n      [0, 3, 0],\r\n      [3, 3, 3]\r\n    ],\r\n    color: 3\r\n  },\r\n  // S\r\n  {\r\n    shape: [\r\n      [0, 4, 4],\r\n      [4, 4, 0]\r\n    ],\r\n    color: 4\r\n  },\r\n  // Z\r\n  {\r\n    shape: [\r\n      [5, 5, 0],\r\n      [0, 5, 5]\r\n    ],\r\n    color: 5\r\n  },\r\n  // J\r\n  {\r\n    shape: [\r\n      [6, 0, 0],\r\n      [6, 6, 6]\r\n    ],\r\n    color: 6\r\n  },\r\n  // L\r\n  {\r\n    shape: [\r\n      [0, 0, 7],\r\n      [7, 7, 7]\r\n    ],\r\n    color: 7\r\n  }\r\n];\r\n\r\nexport function getRandomTetromino(cols) {\r\n  const idx = Math.floor(Math.random() * TETROMINOS.length);\r\n  const { shape, color } = TETROMINOS[idx];\r\n  return {\r\n    tetromino: shape,\r\n    color,\r\n    pos: { x: Math.floor((cols - shape[0].length) / 2), y: 0 }\r\n  };\r\n}\r\n\r\nexport function checkCollision(board, tetromino, pos) {\r\n  for (let y = 0; y < tetromino.length; y++) {\r\n    for (let x = 0; x < tetromino[0].length; x++) {\r\n      if (tetromino[y][x]) {\r\n        const newY = pos.y + y;\r\n        const newX = pos.x + x;\r\n        if (\r\n          newY < 0 ||\r\n          newY >= board.length ||\r\n          newX < 0 ||\r\n          newX >= board[0].length ||\r\n          board[newY][newX]\r\n        ) {\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\nexport function mergeTetromino(board, tetromino, pos, preview = false) {\r\n  const newBoard = board.map(row => [...row]);\r\n  for (let y = 0; y < tetromino.length; y++) {\r\n    for (let x = 0; x < tetromino[0].length; x++) {\r\n      if (tetromino[y][x]) {\r\n        const newY = pos.y + y;\r\n        const newX = pos.x + x;\r\n        if (newY >= 0 && newY < board.length && newX >= 0 && newX < board[0].length) {\r\n          newBoard[newY][newX] = preview ? -tetromino[y][x] : tetromino[y][x];\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return newBoard;\r\n}\r\n\r\nexport function clearLines(board) {\r\n  let cleared = 0;\r\n  const newBoard = board.filter(row => {\r\n    if (row.every(cell => cell > 0)) {\r\n      cleared++;\r\n      return false;\r\n    }\r\n    return true;\r\n  });\r\n  while (newBoard.length < board.length) {\r\n    newBoard.unshift(Array(board[0].length).fill(0));\r\n  }\r\n  return { newBoard, cleared };\r\n}\r\n\r\nexport function nextPosition(pos, dir) {\r\n  if (dir === \"left\") return { ...pos, x: pos.x - 1 };\r\n  if (dir === \"right\") return { ...pos, x: pos.x + 1 };\r\n  if (dir === \"down\") return { ...pos, y: pos.y + 1 };\r\n  return pos;\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}